% FACT: program(program_id, program_name, qualified_program_name, begin_annotation_id, end_annotation_id).
program(1, "main", "main", 1, 41).
program(2, "fetch_mask", "main/fetch_mask", 10, 17).
program(3, "load_data", "main/load_data", 18, 24).
program(4, "standardize_with_mask", "main/standardize_with_mask", 25, 32).
program(5, "simple_diagnose", "main/simple_diagnose", 33, 40).

% FACT: workflow(program_id).
workflow(1).

% FACT: function(program_id).

% FACT: has_subprogram(program_id, subprogram_id).
has_subprogram(1, 2).
has_subprogram(1, 3).
has_subprogram(1, 4).
has_subprogram(1, 5).

% FACT: port(port_id, port_type, port_name, qualified_port_name, port_annotation_id, data_id).
port(1, "PARAM", "db_pth", "main<-db_pth", 2, 1).
port(2, "PARAM", "fmodel", "main<-fmodel", 3, 2).
port(3, "IN", "input_mask_file", "main<-input_mask_file", 4, 3).
port(4, "IN", "input_data_file", "main<-input_data_file", 6, 4).
port(5, "OUT", "result_NEE_pdf", "main->result_NEE_pdf", 8, 5).
port(6, "PARAM", "db_pth", "main/fetch_mask<-db_pth", 11, 6).
port(7, "IN", "g", "main/fetch_mask<-g", 12, 7).
port(8, "OUT", "mask", "main/fetch_mask->mask", 15, 8).
port(9, "PARAM", "db_pth", "main/load_data<-db_pth", 19, 6).
port(10, "IN", "input_data_file", "main/load_data<-input_data_file", 20, 9).
port(11, "OUT", "data", "main/load_data->data", 22, 10).
port(12, "IN", "data", "main/standardize_with_mask<-data", 26, 10).
port(13, "IN", "mask", "main/standardize_with_mask<-mask", 28, 8).
port(14, "OUT", "data", "main/standardize_with_mask->data", 30, 11).
port(15, "PARAM", "fmodel", "main/simple_diagnose<-fmodel", 34, 12).
port(16, "IN", "data", "main/simple_diagnose<-data", 35, 11).
port(17, "OUT", "pp", "main/simple_diagnose->pp", 37, 13).

% FACT: port_alias(port_id, alias).
port_alias(7, "input_mask_file").
port_alias(8, "land_water_mask").
port_alias(11, "NEE_data").
port_alias(12, "NEE_data").
port_alias(13, "land_water_mask").
port_alias(14, "standardized_NEE_data").
port_alias(16, "standardized_NEE_data").
port_alias(17, "result_NEE_pdf").

% FACT: port_uri_template(port_id, uri).
port_uri_template(3, "file:{db_pth}/land_water_mask/LandWaterMask_Global_CRUNCEP.nc").
port_uri_template(4, "file:{db_pth}/NEE_first_year.nc").
port_uri_template(5, "file:result_NEE.pdf").
port_uri_template(7, "file:{db_pth}/land_water_mask/LandWaterMask_Global_CRUNCEP.nc").
port_uri_template(10, "file:{db_pth}/NEE_first_year.nc").
port_uri_template(17, "file:result_NEE.pdf").

% FACT: has_in_port(block_id, port_id).
has_in_port(1, 1).
has_in_port(1, 2).
has_in_port(1, 3).
has_in_port(1, 4).
has_in_port(2, 6).
has_in_port(2, 7).
has_in_port(3, 9).
has_in_port(3, 10).
has_in_port(4, 12).
has_in_port(4, 13).
has_in_port(5, 15).
has_in_port(5, 16).

% FACT: has_out_port(block_id, port_id).
has_out_port(1, 5).
has_out_port(2, 8).
has_out_port(3, 11).
has_out_port(4, 14).
has_out_port(5, 17).

% FACT: data(data_id, data_name, qualified_data_name).
data(1, "db_pth", "db_pth").
data(2, "fmodel", "fmodel").
data(3, "input_mask_file", "input_mask_file").
data(4, "input_data_file", "input_data_file").
data(5, "result_NEE_pdf", "result_NEE_pdf").
data(6, "db_pth", "main.db_pth").
data(7, "input_mask_file", "main.input_mask_file").
data(8, "land_water_mask", "main.land_water_mask").
data(9, "input_data_file", "main.input_data_file").
data(10, "NEE_data", "main.NEE_data").
data(11, "standardized_NEE_data", "main.standardized_NEE_data").
data(12, "fmodel", "main.fmodel").
data(13, "result_NEE_pdf", "main.result_NEE_pdf").

% FACT: channel(channel_id, data_id).
channel(1, 5).
channel(2, 6).
channel(3, 6).
channel(4, 7).
channel(5, 9).
channel(6, 10).
channel(7, 8).
channel(8, 12).
channel(9, 11).
channel(10, 1).
channel(11, 1).
channel(12, 2).
channel(13, 3).
channel(14, 4).
channel(15, 13).

% FACT: port_connects_to_channel(port_id, channel_id).
port_connects_to_channel(17, 1).
port_connects_to_channel(6, 2).
port_connects_to_channel(9, 3).
port_connects_to_channel(7, 4).
port_connects_to_channel(10, 5).
port_connects_to_channel(11, 6).
port_connects_to_channel(12, 6).
port_connects_to_channel(8, 7).
port_connects_to_channel(13, 7).
port_connects_to_channel(15, 8).
port_connects_to_channel(14, 9).
port_connects_to_channel(16, 9).
port_connects_to_channel(6, 10).
port_connects_to_channel(9, 11).
port_connects_to_channel(15, 12).
port_connects_to_channel(7, 13).
port_connects_to_channel(10, 14).
port_connects_to_channel(17, 15).

% FACT: inflow_connects_to_channel(port_id, channel_id).
inflow_connects_to_channel(1, 2).
inflow_connects_to_channel(1, 3).
inflow_connects_to_channel(3, 4).
inflow_connects_to_channel(4, 5).
inflow_connects_to_channel(2, 8).
inflow_connects_to_channel(1, 10).
inflow_connects_to_channel(1, 11).
inflow_connects_to_channel(2, 12).
inflow_connects_to_channel(3, 13).
inflow_connects_to_channel(4, 14).

% FACT: outflow_connects_to_channel(port_id, channel_id).
outflow_connects_to_channel(5, 1).
outflow_connects_to_channel(5, 15).

% FACT: uri_variable(uri_variable_id, variable_name, port_id).
uri_variable(1, "db_pth", 3).
uri_variable(2, "db_pth", 4).
uri_variable(3, "db_pth", 7).
uri_variable(4, "db_pth", 10).

% FACT: log_template(log_template_id, port_id, entry_template, log_annotation_id).

% FACT: log_template_variable(log_variable_id, variable_name, log_template_id).

% FACT: assert(program_id, subject_id, predicate, object_id).

